# -*- coding: utf-8 -*-
"""Trabalho final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tG_NmeYZ60GiccKvKZd8FkQgt7b91k-8

# Importações
"""

import numpy as np 
import pandas as pd
from sklearn.naive_bayes import GaussianNB
from sklearn import model_selection
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler  
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix

"""# Tratamento de dados - Parte 2"""

path = '/content/drive/My Drive/device1.csv'

device = pd.read_csv(path, sep=',')

device = device.drop(columns=['typeManutention'])

array = device.values
X = array[:,1:4]
Y = array[:,4]

validation_size = 0.3

seed = 7
X_train, X_validation, Y_train, Y_validation = model_selection.train_test_split(X, Y, test_size=validation_size, random_state=seed)

"""## Naive Bayes"""

clf = GaussianNB()

scoring = 'accuracy'

clf.fit(X_train, Y_train.astype(int)) 

pred_clf = clf.predict(X_validation)

prob_pos_clf = clf.predict_proba(X_validation)[:, 1]

pred_clf_df = pd.DataFrame(pred_clf.reshape(19,1))
pred_clf_prob_df = pd.DataFrame(prob_pos_clf.reshape(19,1))
Y_validation_df = pd.DataFrame(Y_validation.reshape(19,1))

pred_clf_df.rename(columns={0:'Prediction'}, inplace=True)
pred_clf_prob_df.rename(columns={0:'Probably prediction'}, inplace=True)
Y_validation_df.rename(columns={0:'Should be'}, inplace=True)

pred_outcome = pd.concat([pred_clf_prob_df, pred_clf_df, Y_validation_df], axis=1)

accuracy_score(Y_validation.astype(int), pred_clf)

"""## KNN"""

scaler = StandardScaler()  
scaler.fit(X_train)

x_train = scaler.transform(X_train)  
x_test = scaler.transform(X_validation)

classifier = KNeighborsClassifier(n_neighbors = 5)  
classifier.fit(X_train, Y_train.astype(int))

y_pred = classifier.predict(x_test)
accuracy_score(Y_validation.astype(int), y_pred)

pred_clf_df = pd.DataFrame(y_pred.reshape(19,1))
Y_validation_df = pd.DataFrame(Y_validation.reshape(19,1))

pred_clf_df.rename(columns={0:'Prediction'}, inplace=True)
Y_validation_df.rename(columns={0:'Should be'}, inplace=True)

pred_outcome = pd.concat([pred_clf_df, Y_validation_df], axis=1)